// ONLY NOTES!
/** 
 * 
 * 
 * Comandos instalados
 * npm init -y
 * npm i express, cors, mysql2, sequelize
 * type es para avisar a la aplicacio que se utilizar por Modulos 
 * Se utiliza el ".env" para guardar las variables de entorno, no se sube al repositorio.
 * Se utiliza el "dotenv" para cargar las variables de entorno desde el archivo ".env" a la aplicacion.
 * NodeJs es una forma en la que corra JavaScript
 * La diferencia de Javascript, es que esta tiene Apis del navegador. (Ej.- console,log, alert, etc.)
 * 
 * "process" es un objeto global que contiene información sobre el proceso actual de Node.js.
 * Se pone un shortCircuit para que no se repita el mismo código en caso de que no exista la variable de entorno.
 * Las RestFul Api debed e permitir que todas las rutas tengan acceso a los metodos HTTP
 * Las rutas se añaden a lo de "app use".
 * 
 *
 * 
 * 
 *  ORM: Libreria o framework que permite interactuar con la base de datos de una manera mas sencilla y amigable, sin tener que escribir SQL directamente. Ejemplo: Sequelize, TypeORM, Mongoose, etc.
 * UN modelo es una representacion de la base de datos, en este caso, la tabla.
 *  Se crearan las tablas apartir de los modelos que uno crea.
 * 
 * 
 **/

/** 
 *  API stuff
 * fakestoreapiback <-- BD
 * 
 * Commands:
 * URL: api/users/1
 * 
 * 
 **/


Script:
-- Crear base de datos
CREATE DATABASE IF NOT EXISTS FakeStoreDB;
USE FakeStoreDB;

-- Tabla Usuarios
CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla Categorías
CREATE TABLE Categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Tabla Productos
CREATE TABLE Products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    category_id INT,
    stock INT DEFAULT 0,
    FOREIGN KEY (category_id) REFERENCES Categories(id)
);

-- Tabla Pedidos
CREATE TABLE Orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    total DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);

-- Tabla Detalles de Pedido
CREATE TABLE OrderDetails (
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES Orders(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);